---
import { Image } from "astro:assets";

import type { Options as FloatOptions } from "../scripts/components/Float/Float.ts";
import type { Options as BallOptions } from "../scripts/components/Ball/Ball.ts";

import sphere from "../assets/sphere.png";
import block from "../assets/block.png";
import block2 from "../assets/block-2.png";
import disc from "../assets/disc.png";
const images = { sphere, block, block2, disc } as const;

type Props = {
  image: keyof typeof images;
  size: number;
  /** how many images? */
  amount?: number;
  /** stack images? */
  stacked?: boolean;
};
const { size, image, amount = 1, stacked = false } = Astro.props;

const { min, max } = Math;

const floatOptions: FloatOptions = {
  strength: {
    x: max(0.4, min(0.7, size * 0.05)),
    y: max(0.4, min(0.7, size * 0.05)),
  },
  properties: ["x", "y", "rotation", "scaleX", "scaleY"],
};

const ballOptions: BallOptions = {
  container: ".bounds",
  initialRotation: 0,
  speedRotation: 0,
  speedX: 0.1 + size * 0.005,
  speedY: 0.1 + size * 0.005,
};
---

<div
  class:list={["object", { "--stacked": stacked }]}
  x-data={`Ball(${JSON.stringify(ballOptions)})`}
  x-bind="bindings"
  style={{ "--size": size, zIndex: size }}
>
  <div x-data={`Float(${JSON.stringify(floatOptions)})`} x-bind="bindings">
    <div class="object_visual">
      {
        Array.from({ length: amount }).map((_, index) => (
          <Image
            src={images[image]}
            style={{ zIndex: 1000 - index }}
            alt="A Sphere."
          />
        ))
      }
    </div>
  </div>
</div>

<!-- scoped css for this component -->
<style>
  .object {
    position: fixed;
    top: 0;
    left: 0;
    --size: 20;
    width: calc(var(--size) * 1vmin);
    height: calc(var(--size) * 1vmin);
  }
  .object * {
    position: absolute;
    inset: 0;
  }

  .object img {
    display: block;
    width: 100%;
    height: 100%;
    object-fit: contain;
    pointer-events: all;
  }

  /*
.object_visual.--sphere {
  --color-light: #dadada;
  --color-dark: #dbdbdb;
  --color-shadow: rgb(0 0 0 / 0.5);
  background: var(--color-light);
  background-image: radial-gradient(
    circle at 80% 10%,
    var(--color-light) 20%,
    var(--color-dark) 50%,
    var(--color-shadow) 80%
  );
  border-radius: 50%;
  box-shadow: 0 0 calc(var(--size) * 1px) 0 rgb(0 0 0 / 0.2) inset;
} */

  /**
 * Build stacks of images
 */
  .object.--stacked img {
    position: relative;
    height: auto;
    margin-bottom: -25%;
  }
</style>
